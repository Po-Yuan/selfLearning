//after improving by unordered_map

class Solution {
public:
    int totalFruit(vector<int>& tree) {
        unordered_map<int,int> treemap;
        int start = 0;
        int result = 0;
        for(int index = 0 ; index!= tree.size() ; index++){            
            treemap[tree[index]] = treemap[tree[index]] + 1;
            
            if(treemap.size()>2){
                treemap[tree[start]] = treemap[tree[start]] - 1;
                if(treemap[tree[start]] == 0){
                    treemap.erase(tree[start]);
                }
                start++;
            }
            result = max(result, index - start + 1);
        }
        return result;
    }
};
df

===========
learning
unordered_map和map皆為使用紅黑樹資料結構，差異在於unordered_map沒有排序的功能，所以在查詢中效率較佳，其採用key-value方式儲存資料，透過ordered_map，存放fruit種類和數量，當儲存種類超過兩種時候，逐漸遞減前面水果種類和數量(此時能採兩種水果的最大值已經記錄下來)，若有水果種類的數量為0時候，使用erase將其水果種類移除，直到水果種類為2或者程式結束。

Example 1:

Input: [1,2,1]
Output: 3
Explanation: We can collect [1,2,1].
Example 2:

Input: [0,1,2,2]
Output: 3
Explanation: We can collect [1,2,2].
If we started at the first tree, we would only collect [0, 1].
Example 3:

Input: [1,2,3,2,2]
Output: 4
Explanation: We can collect [2,3,2,2].
If we started at the first tree, we would only collect [1, 2].
Example 4:

Input: [3,3,3,1,2,1,1,2,3,3,4]
Output: 5
Explanation: We can collect [1,2,1,1,2].
If we started at the first tree or the eighth tree, we would only collect 4 fruits.